/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Demo_H
#define Demo_H

#include <thrift/TDispatchProcessor.h>
#include "demo_types.h"

namespace demo {

class DemoIf {
 public:
  virtual ~DemoIf() {}
  virtual void hello(my_string& _return, const my_string& thing) = 0;
};

class DemoIfFactory {
 public:
  typedef DemoIf Handler;

  virtual ~DemoIfFactory() {}

  virtual DemoIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DemoIf* /* handler */) = 0;
};

class DemoIfSingletonFactory : virtual public DemoIfFactory {
 public:
  DemoIfSingletonFactory(const boost::shared_ptr<DemoIf>& iface) : iface_(iface) {}
  virtual ~DemoIfSingletonFactory() {}

  virtual DemoIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DemoIf* /* handler */) {}

 protected:
  boost::shared_ptr<DemoIf> iface_;
};

class DemoNull : virtual public DemoIf {
 public:
  virtual ~DemoNull() {}
  void hello(my_string& /* _return */, const my_string& /* thing */) {
    return;
  }
};

typedef struct _Demo_hello_args__isset {
  _Demo_hello_args__isset() : thing(false) {}
  bool thing;
} _Demo_hello_args__isset;

class Demo_hello_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  Demo_hello_args(const Demo_hello_args&);
  Demo_hello_args& operator=(const Demo_hello_args&);
  Demo_hello_args() : thing() {
  }

  virtual ~Demo_hello_args() throw();
  my_string thing;

  _Demo_hello_args__isset __isset;

  void __set_thing(const my_string& val);

  bool operator == (const Demo_hello_args & rhs) const
  {
    if (!(thing == rhs.thing))
      return false;
    return true;
  }
  bool operator != (const Demo_hello_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Demo_hello_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Demo_hello_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~Demo_hello_pargs() throw();
  const my_string* thing;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Demo_hello_result__isset {
  _Demo_hello_result__isset() : success(false) {}
  bool success;
} _Demo_hello_result__isset;

class Demo_hello_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  Demo_hello_result(const Demo_hello_result&);
  Demo_hello_result& operator=(const Demo_hello_result&);
  Demo_hello_result() : success() {
  }

  virtual ~Demo_hello_result() throw();
  my_string success;

  _Demo_hello_result__isset __isset;

  void __set_success(const my_string& val);

  bool operator == (const Demo_hello_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Demo_hello_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Demo_hello_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Demo_hello_presult__isset {
  _Demo_hello_presult__isset() : success(false) {}
  bool success;
} _Demo_hello_presult__isset;

class Demo_hello_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~Demo_hello_presult() throw();
  my_string* success;

  _Demo_hello_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DemoClient : virtual public DemoIf {
 public:
  DemoClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DemoClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void hello(my_string& _return, const my_string& thing);
  void send_hello(const my_string& thing);
  void recv_hello(my_string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DemoProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DemoIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DemoProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_hello(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DemoProcessor(boost::shared_ptr<DemoIf> iface) :
    iface_(iface) {
    processMap_["hello"] = &DemoProcessor::process_hello;
  }

  virtual ~DemoProcessor() {}
};

class DemoProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DemoProcessorFactory(const ::boost::shared_ptr< DemoIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DemoIfFactory > handlerFactory_;
};

class DemoMultiface : virtual public DemoIf {
 public:
  DemoMultiface(std::vector<boost::shared_ptr<DemoIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DemoMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DemoIf> > ifaces_;
  DemoMultiface() {}
  void add(boost::shared_ptr<DemoIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void hello(my_string& _return, const my_string& thing) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->hello(_return, thing);
    }
    ifaces_[i]->hello(_return, thing);
    return;
  }

};

} // namespace

#endif
